yrly_pct_AndelRojt...18,
yrly_pct_proportion_young_forest,
yrly_pct_prop_snow_30_plus_imputed)
## RASE at competitive height percent change national ####
library(dplyr)
# Filter change data so that it only includes relvant varialbes
RASE_data_change <- RASE_data_change %>%
dplyr:select(yrly_pct_RASEAndelGynnsam,
yrly_pct_Älgtäthet.i.vinterstam,
yrly_pct_ungulate_index,
yrly_pct_AntalTallarHa,
yrly_pct_AntalGranarHa,
yrly_pct_AntalBjorkarHa,
yrly_pct_AndelRojt...18,
yrly_pct_proportion_young_forest,
yrly_pct_prop_snow_30_plus_imputed)
# Filter change data so that it only includes relvant varialbes
RASE_data_change <- RASE_data_change %>%
dplyr::select(yrly_pct_RASEAndelGynnsam,
yrly_pct_Älgtäthet.i.vinterstam,
yrly_pct_ungulate_index,
yrly_pct_AntalTallarHa,
yrly_pct_AntalGranarHa,
yrly_pct_AntalBjorkarHa,
yrly_pct_AndelRojt...18,
yrly_pct_proportion_young_forest,
yrly_pct_prop_snow_30_plus_imputed)
View(RASE_data_change)
# Run the model
glm_RASE_comp_chg <- glm(yrly_pct_RASEAndelGynnsam ~
scale(yrly_pct_Älgtäthet.i.vinterstam) +
scale(yrly_pct_ungulate_index) +
scale(yrly_pct_AntalTallarHa) +
scale(yrly_pct_AntalBjorkarHa) +
scale(yrly_pct_AndelRojt...18) +
scale(yrly_pct_proportion_young_forest) +
scale(yrly_pct_prop_snow_30_plus_imputed),
family = gaussian(link = "identity"),
data = RASE_data_change)
summary(glm_RASE_comp_chg)
# Check for over dispersal
glm_RASE_comp_simres <- simulateResiduals(glm_RASE_comp_chg)
testDispersion(glm_RASE_comp_simres)
# Check for over dispersal
glm_RASE_comp_chg_simres <- simulateResiduals(glm_RASE_comp_chg)
testDispersion(glm_RASE_comp_chg_simres)
# Check for normality of residuals (less imprtant is not over-dispersed)
shapiro.test(residuals(glm_RASE_comp_chg))  # Shapiro-Wilk test
qqnorm(residuals(glm_RASE_comp_chg)); qqline(residuals(glm_RASE_comp_chg), col = "red")  # Q-Q plot
# Backward stepwise selection
glm_RASE_comp_chg_bck <- step(glm_RASE_comp_chg, direction = "backward", trace = TRUE) # same result as drop1
summary(glm_RASE_comp_chg_bck)
# Backward stepwise selection
glm_RASE_comp_chg_bck <- step(glm_RASE_comp_chg, direction = "backward", trace = TRUE) # same result as drop1
# Change NA values to zero
RASE_data_change[is.na(RASE_data_change)] <- 0
# Run the model
glm_RASE_comp_chg <- glm(yrly_pct_RASEAndelGynnsam ~
scale(yrly_pct_Älgtäthet.i.vinterstam) +
scale(yrly_pct_ungulate_index) +
scale(yrly_pct_AntalTallarHa) +
scale(yrly_pct_AntalBjorkarHa) +
scale(yrly_pct_AndelRojt...18) +
scale(yrly_pct_proportion_young_forest) +
scale(yrly_pct_prop_snow_30_plus_imputed),
family = gaussian(link = "identity"),
data = RASE_data_change)
summary(glm_RASE_comp_chg)
# Check for over dispersal
glm_RASE_comp_chg_simres <- simulateResiduals(glm_RASE_comp_chg)
testDispersion(glm_RASE_comp_chg_simres)
# Check for normality of residuals (less imprtant is not over-dispersed)
shapiro.test(residuals(glm_RASE_comp_chg))  # Shapiro-Wilk test
qqnorm(residuals(glm_RASE_comp_chg)); qqline(residuals(glm_RASE_comp_chg), col = "red")  # Q-Q plot
# Backward stepwise selection
glm_RASE_comp_chg_bck <- step(glm_RASE_comp_chg, direction = "backward", trace = TRUE) # same result as drop1
summary(glm_RASE_comp_chg_bck)
# Check for over dispersal
bck_glm_RASE_comp_simres <- simulateResiduals(glm_RASE_comp_bck)
# Check for over dispersal
bck_glm_RASE_comp_chg_simres <- simulateResiduals(glm_RASE_comp_chg_bck)
testDispersion(bck_glm_RASE_comp_chg_simres)
# Check for normality of residuals
shapiro.test(residuals(glm_RASE_comp_chg_bck))  # Shapiro-Wilk test
qqnorm(residuals(glm_RASE_comp_chg_bck)); qqline(residuals(glm_RASE_comp_chg_bck), col = "red")  # Q-Q plot
# USE step() for forwards stepwise selection
# Fit an initial empty model
glm_RASE_comp_chg_null <- glm(yrly_pct_RASEAndelGynnsam ~ 1,  # Model with no predictors
family = gaussian(link = "identity"),
data = RASE_data_change)
# Fit a forward stepwise model
glm_RASE_comp_chg_fwd <- step(glm_RASE_comp_chg_null,
scope = list(lower = glm_RASE_comp_chg_null,
upper = ~
scale(yrly_pct_Älgtäthet.i.vinterstam) +
scale(yrly_pct_ungulate_index) +
scale(yrly_pct_AntalTallarHa) +
scale(yrly_pct_AntalBjorkarHa) +
scale(yrly_pct_AndelRojt...18) +
scale(yrly_pct_proportion_young_forest) +
scale(yrly_pct_prop_snow_30_plus_imputed),
direction = "forward",
trace = TRUE))
summary(glm_RASE_comp_fwd)
summary(glm_RASE_comp_chg_fwd)
plot(RASE_data_change$yrly_pct_RASEAndelGynnsam ~ RASE_data_change$yrly_pct_AntalTallarHa)
# Remove rows with NA values
RASE_data_NA <- na.omit(RASE_data)
# Calculate 3-point averages for 2020-2024
RASE_data_last_3_point_avg <- RASE_data_NA %>%
filter(InvAr >= 2020 & InvAr <= 2024) %>%
group_by(Registreri, LandsdelNamn, LanNamn) %>%
arrange(Registreri, desc(InvAr)) %>%
slice_head(n = 3) %>%
summarise(across(where(is.numeric) & !any_of("InvAr"), list(mean = ~mean(.x, na.rm = TRUE),
sd = ~sd(.x, na.rm = TRUE))),
years_used = paste(InvAr, collapse = ", ")) %>%
ungroup()
# Calculate 3-point averages for 2015-2019
RASE_data_first_3_point_avg <- RASE_data_NA %>%
filter(InvAr >= 2015 & InvAr <= 2019) %>%
group_by(Registreri, LandsdelNamn, LanNamn) %>%
arrange(Registreri, InvAr) %>%
slice_head(n = 3) %>%
summarise(across(where(is.numeric) & !any_of("InvAr"), list(mean = ~mean(.x, na.rm = TRUE),
sd = ~sd(.x, na.rm = TRUE))),
years_used = paste(InvAr, collapse = ", ")) %>%
ungroup()
# Merge datasets
RASE_data_change <- RASE_data_last_3_point_avg %>%
left_join(RASE_data_first_3_point_avg, by = c("Registreri", "LandsdelNamn", "LanNamn"),
suffix = c("_2020_2024", "_2015_2019")) %>%
mutate(
first_year_2024 = as.numeric(substr(years_used_2020_2024, 1, 4)),
last_year_2024 = as.numeric(substr(years_used_2020_2024, nchar(years_used_2020_2024) - 3, nchar(years_used_2020_2024))),
first_year_2019 = as.numeric(substr(years_used_2015_2019, 1, 4)),
last_year_2019 = as.numeric(substr(years_used_2015_2019, nchar(years_used_2015_2019) - 3, nchar(years_used_2015_2019))),
midpoint_year_2024 = (first_year_2024 + last_year_2024) / 2,
midpoint_year_2019 = (first_year_2019 + last_year_2019) / 2,
year_diff = midpoint_year_2024 - midpoint_year_2019
)
RASE_data_change <- RASE_data_change %>%
mutate(
# Calculate absolute change
across(contains("mean_2015_2019"),
~ (RASE_data_change[[sub("_2015_2019", "_2020_2024", cur_column())]] - .),
.names = "abs_change_{.col}"),
# Calculate yearly absolute change
across(starts_with("abs_change"), ~ . / year_diff, .names = "yrly_{.col}")
) %>%
rename_with(~ sub("_mean_2015_2019", "", .), starts_with("abs_change")) %>%
rename_with(~ sub("_mean_2015_2019", "", .), starts_with("yrly_abs_change"))
RASE_data_change <- RASE_data_change %>%
mutate(
# Calculate percentage change
across(contains("mean_2015_2019"),
~ 100 * (RASE_data_change[[sub("_2015_2019", "_2020_2024", cur_column())]] - .) / .,
.names = "pct_{.col}"),
# Calculate yearly percentage change
across(starts_with("pct_"), ~ . / year_diff, .names = "yrly_{.col}")
) %>%
rename_with(~ sub("_mean_2015_2019", "", .), starts_with("pct_")) %>%
rename_with(~ sub("_mean_2015_2019", "", .), starts_with("yrly_"))
# Remove infinite and NaN values
RASE_data_change <- RASE_data_change %>%
mutate(across(everything(), ~ ifelse(is.infinite(.), NA, .))) %>%
mutate(across(everything(), ~ ifelse(is.nan(.), NA, .)))
# Filter change data so that it only includes relvant varialbes
RASE_data_change <- RASE_data_change %>%
dplyr::select(yrly_pct_RASEAndelGynnsam,
yrly_pct_Älgtäthet.i.vinterstam,
yrly_pct_ungulate_index,
yrly_pct_AntalTallarHa,
yrly_pct_AntalGranarHa,
yrly_pct_AntalBjorkarHa,
yrly_pct_AndelRojt...18,
yrly_pct_proportion_young_forest)
View(RASE_data_change)
# Remove rows with NA values from RASE_data_change
RASE_data_change <- na.omit(RASE_data_change)
# Run the model
glm_RASE_comp_chg <- glm(yrly_pct_RASEAndelGynnsam ~
scale(yrly_pct_Älgtäthet.i.vinterstam) +
scale(yrly_pct_ungulate_index) +
scale(yrly_pct_AntalTallarHa) +
scale(yrly_pct_AntalBjorkarHa) +
scale(yrly_pct_AndelRojt...18) +
scale(yrly_pct_proportion_young_forest),
family = gaussian(link = "identity"),
data = RASE_data_change)
summary(glm_RASE_comp_chg)
# Check for over dispersal
glm_RASE_comp_chg_simres <- simulateResiduals(glm_RASE_comp_chg)
testDispersion(glm_RASE_comp_chg_simres)
# Check for normality of residuals (less imprtant is not over-dispersed)
shapiro.test(residuals(glm_RASE_comp_chg))  # Shapiro-Wilk test
qqnorm(residuals(glm_RASE_comp_chg)); qqline(residuals(glm_RASE_comp_chg), col = "red")  # Q-Q plot
# Backward stepwise selection
glm_RASE_comp_chg_bck <- step(glm_RASE_comp_chg, direction = "backward", trace = TRUE) # same result as drop1
summary(glm_RASE_comp_chg_bck)
# Check for over dispersal
bck_glm_RASE_comp_chg_simres <- simulateResiduals(glm_RASE_comp_chg_bck)
testDispersion(bck_glm_RASE_comp_chg_simres)
# Check for normality of residuals
shapiro.test(residuals(glm_RASE_comp_chg_bck))  # Shapiro-Wilk test
qqnorm(residuals(glm_RASE_comp_chg_bck)); qqline(residuals(glm_RASE_comp_chg_bck), col = "red")  # Q-Q plot
## prerequisites
library(ggplot2)
library(tmap)
library(sf)
library(dplyr)
library(readxl)
# Load the data
AFO_data <- read_excel("//storage-um.slu.se/restricted$/vfm/Vilt-Skog/Moose-Targets/SKS/SKS_ABIN.xlsx",
sheet = "Data")
AFO_data <- read_excel("GitHub/SEPA-report-AROW/AFO data.xlsx")
View(AFO_data)
# Load the data
AFO_data <- read_excel("//storage-um.slu.se/restricted$/vfm/Vilt-Skog/Moose-Targets/SKS/SKS_ABIN.xlsx",
sheet = "Data")
## Data summary function to find means and various SE data ####
summarySE <- function(data=NULL, measurevar, groupvars=NULL, na.rm=TRUE,
conf.interval=.95, .drop=TRUE) {
library(plyr)
length2 <- function (x, na.rm=TRUE) {
if (na.rm) sum(!is.na(x))
else       length(x)
}
datac <- ddply(data, groupvars, .drop=.drop,
.fun = function(xx, col) {
c(N    = length2(xx[[col]], na.rm=na.rm),
mean = mean   (xx[[col]], na.rm=na.rm),
sd   = sd     (xx[[col]], na.rm=na.rm)
)
},
measurevar
)
datac <- rename(datac, c("mean" = measurevar))
datac$se <- datac$sd / sqrt(datac$N)
ciMult <- qt(conf.interval/2 + .5, datac$N-1)
datac$ci <- datac$se * ciMult
return(datac)
}
## Filter years for more recent data (if needed)
AFO_data_RASE <- AFO_data %>%
filter(InvAr %in% c(2018, 2019, 2020, 2021, 2022, 2023, 2024))
AFO_data_first <- AFO_data %>%
filter(InvAr %in% c(2018, 2019, 2020))
AFO_data_last <- AFO_data %>%
filter(InvAr %in% c(2022, 2023, 2024))
# Calculate the mean and error bars for RASE per hectare by region (LandsdelNamn)
region_summary <- summarySE(data = AFO_data_RASE,
measurevar = "AntalRASEHa",
groupvars = "LandsdelNamn")
# Plot the results
ggplot(region_summary, aes(x = reorder(LandsdelNamn, -AntalRASEHa), y = AntalRASEHa)) +
geom_bar(stat = "identity", colour = "black", fill = "white") +  # Bars for the means
geom_errorbar(aes(ymin = AntalRASEHa - ci, ymax = AntalRASEHa + ci), width = 0.0,
linetype = 1, colour = "black") +  # Error bars for confidence intervals
geom_hline(yintercept = c(200, 400), linetype = 2, color = "darkorange") +  # Reference lines
labs(title = "RASE stems per hectare by region",
x = "Region",
y = "RASE stems per hectare") +
theme_classic() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),  # Rotate x-axis labels for better visibility
plot.title = element_text(hjust = 0.5)  # Center the title
)
# Plot with tmap
RASEperHa <- tm_shape(AFO_joined) +
tm_graticules(alpha=0.3, n.x=3, n.y=6) +
tm_fill("AntalRASEHa", textNA = "NA", colorNA="#999999", title="",
palette=c("#c7eae5", "#80cdc1", "#35978f", "#01665e", "#003c30"),
breaks = c(0, 200, 400, 10000),
labels = c("< 200", "200 – 400", "> 400")) +
tm_borders(col="black", lwd=1.5) +    #lwd=1
tm_layout(main.title = "RASE stems per ha. 2022/24", title.size = 1.2, legend.text.size = 1.0) +
tm_shape(AFO_joined) +
tm_fill("Registreri", palette = c("white", "white", "white"), alpha=0, legend.show=FALSE) +
tm_borders(col="black", lwd=1.5) +      #lwd=2
tm_scale_bar(position=c("right", "bottom"))
AFO_shp <- st_read("~/GIS/ÄFO/updated_AFO_shapefile.shp")
AFO_joined <- AFO_shp %>%
left_join(afo_summary, by = "Registreri")
# Plot with tmap
RASEperHa <- tm_shape(AFO_joined) +
tm_graticules(alpha=0.3, n.x=3, n.y=6) +
tm_fill("AntalRASEHa", textNA = "NA", colorNA="#999999", title="",
palette=c("#c7eae5", "#80cdc1", "#35978f", "#01665e", "#003c30"),
breaks = c(0, 200, 400, 10000),
labels = c("< 200", "200 – 400", "> 400")) +
tm_borders(col="black", lwd=1.5) +    #lwd=1
tm_layout(main.title = "RASE stems per ha. 2022/24", title.size = 1.2, legend.text.size = 1.0) +
tm_shape(AFO_joined) +
tm_fill("Registreri", palette = c("white", "white", "white"), alpha=0, legend.show=FALSE) +
tm_borders(col="black", lwd=1.5) +      #lwd=2
tm_scale_bar(position=c("right", "bottom"))
RASEperHa
# Calculate the mean and error bars for RASE per hectare by ÄFO
afo_summary <- summarySE(data = AFO_data_last,
measurevar = "AntalRASEHa",
groupvars = "Registreri")
AFO_shp <- st_read("~/GIS/ÄFO/updated_AFO_shapefile.shp")
AFO_joined <- AFO_shp %>%
left_join(afo_summary, by = "Registreri")
# Plot with tmap
RASEperHa <- tm_shape(AFO_joined) +
tm_graticules(alpha=0.3, n.x=3, n.y=6) +
tm_fill("AntalRASEHa", textNA = "NA", colorNA="#999999", title="",
palette=c("#c7eae5", "#80cdc1", "#35978f", "#01665e", "#003c30"),
breaks = c(0, 200, 400, 10000),
labels = c("< 200", "200 – 400", "> 400")) +
tm_borders(col="black", lwd=1.5) +    #lwd=1
tm_layout(main.title = "RASE stems per ha. 2022/24", title.size = 1.2, legend.text.size = 1.0) +
tm_shape(AFO_joined) +
tm_fill("Registreri", palette = c("white", "white", "white"), alpha=0, legend.show=FALSE) +
tm_borders(col="black", lwd=1.5) +      #lwd=2
tm_scale_bar(position=c("right", "bottom"))
RASEperHa
# Plot with tmap
RASEperHa <- tm_shape(AFO_joined) +
tm_graticules(alpha=0.3, n.x=3, n.y=6) +
tm_fill("AntalRASEHa", textNA = "NA", colorNA="#999999", title="",
palette=c("#c7eae5", "#80cdc1", "#35978f", "#01665e", "#003c30"),
breaks = c(0, 200, 400, 10000),
labels = c("< 200", "200 – 400", "> 400")) +
tm_borders(col="black", lwd=1.5) +    #lwd=1
tm_layout(main.title = "RASE stems per ha. 2022/24", title.size = 1.2, legend.text.size = 1.0) +
tm_shape(AFO_joined) +
tm_fill("Registreri", palette = c("white", "white", "white"), alpha=0, legend.show=FALSE) +
tm_borders(col="black", lwd=1.5) +      #lwd=2
tm_scale_bar(position=c("right", "bottom"))
RASEperHa
# Plot with tmap
RASEperHa <- tm_shape(AFO_joined) +
tm_graticules(alpha=0.3, n.x=3, n.y=6) +
tm_fill("AntalRASEHa", textNA = "NA", colorNA="#999999", title="",
palette=c("#fde725", "#5ec962", "#21918c", "#3b528b", "#440154"),
breaks = c(0, 200, 400, 10000),
labels = c("< 200", "200 – 400", "> 400")) +
tm_borders(col="black", lwd=1.5) +    #lwd=1
tm_layout(main.title = "RASE stems per ha. 2022/24", title.size = 1.2, legend.text.size = 1.0) +
tm_shape(AFO_joined) +
tm_fill("Registreri", palette = c("white", "white", "white"), alpha=0, legend.show=FALSE) +
tm_borders(col="black", lwd=1.5) +      #lwd=2
tm_scale_bar(position=c("right", "bottom"))
RASEperHa
# Plot with tmap
RASEperHa <- tm_shape(AFO_joined) +
tm_graticules(alpha=0.3, n.x=3, n.y=6) +
tm_fill("AntalRASEHa", textNA = "NA", colorNA="#999999", title="",
palette=c("#fde725", "#5ec962", "#21918c", "#3b528b", "#440154"),
breaks = c(0, 200, 400, 10000),
labels = c("< 200", "200 – 400", "> 400")) +
tm_borders(col="white", lwd=1.5) +    #lwd=1
tm_layout(main.title = "RASE stems per ha. 2022/24", title.size = 1.2, legend.text.size = 1.0) +
tm_shape(AFO_joined) +
tm_fill("Registreri", palette = c("white", "white", "white"), alpha=0, legend.show=FALSE) +
tm_borders(col="black", lwd=1.5) +      #lwd=2
tm_scale_bar(position=c("right", "bottom"))
RASEperHa
# Plot with tmap
RASEperHa <- tm_shape(AFO_joined) +
tm_graticules(alpha=0.3, n.x=3, n.y=6) +
tm_fill("AntalRASEHa", textNA = "NA", colorNA="#999999", title="",
palette=c("#fde725", "#5ec962", "#21918c", "#3b528b", "#440154"),
breaks = c(0, 200, 400, 10000),
labels = c("< 200", "200 – 400", "> 400")) +
tm_borders(col="black", lwd=1.5) +    #lwd=1
tm_layout(main.title = "RASE stems per ha. 2022/24", title.size = 1.2, legend.text.size = 1.0) +
tm_shape(AFO_joined) +
tm_fill("Registreri", palette = c("white", "white", "white"), alpha=0, legend.show=FALSE) +
tm_borders(col="white", lwd=1.5) +      #lwd=2
tm_scale_bar(position=c("right", "bottom"))
RASEperHa
# Plot with tmap
RASEperHa <- tm_shape(AFO_joined) +
tm_graticules(alpha=0.3, n.x=3, n.y=6) +
tm_fill("AntalRASEHa", textNA = "NA", colorNA="#999999", title="",
palette=c("#fde725", "#5ec962", "#21918c", "#3b528b", "#440154"),
breaks = c(0, 200, 400, 10000),
labels = c("< 200", "200 – 400", "> 400")) +
tm_borders(col="black", lwd=1.5) +    #lwd=1
tm_layout(main.title = "RASE stems per ha. 2022/24", title.size = 1.2, legend.text.size = 1.0) +
tm_shape(AFO_joined) +
tm_fill("Registreri", palette = c("white", "white", "white"), alpha=0, legend.show=FALSE) +
tm_borders(col="white", lwd=1.5)      #lwd=2
RASEperHa
# Plot with tmap
RASEperHa <- tm_shape(AFO_joined) +
tm_graticules(alpha=0.3, n.x=3, n.y=6) +
tm_fill("AntalRASEHa", textNA = "NA", colorNA="#999999", title="",
palette=c("#f8765c", "#d3436e", "#982d80", "#5f187f", "#221150"),
breaks = c(0, 200, 400, 10000),
labels = c("< 200", "200 – 400", "> 400")) +
tm_borders(col="black", lwd=1.5) +    #lwd=1
tm_layout(main.title = "RASE stems per ha. 2022/24", title.size = 1.2, legend.text.size = 1.0) +
tm_shape(AFO_joined) +
tm_fill("Registreri", palette = c("white", "white", "white"), alpha=0, legend.show=FALSE) +
tm_borders(col="white", lwd=1.5)      #lwd=2
RASEperHa
# Plot with tmap
RASEperHa <- tm_shape(AFO_joined) +
tm_graticules(alpha=0.3, n.x=3, n.y=6) +
tm_fill("AntalRASEHa", textNA = "NA", colorNA="#999999", title="",
palette=c("red", "yellow", "blue"),
breaks = c(0, 200, 400, 10000),
labels = c("< 200", "200 – 400", "> 400")) +
tm_borders(col="black", lwd=1.5) +    #lwd=1
tm_layout(main.title = "RASE stems per ha. 2022/24", title.size = 1.2, legend.text.size = 1.0) +
tm_shape(AFO_joined) +
tm_fill("Registreri", palette = c("white", "white", "white"), alpha=0, legend.show=FALSE) +
tm_borders(col="white", lwd=1.5)      #lwd=2
RASEperHa
# Plot with tmap
RASEperHa <- tm_shape(AFO_joined) +
tm_graticules(alpha=0.3, n.x=3, n.y=6) +
tm_fill("AntalRASEHa", textNA = "NA", colorNA="#999999", title="",
palette=c("red", "yellow", "blue"),
breaks = c(0, 200, 400, 10000),
labels = c("< 200", "200 – 400", "> 400")) +
tm_borders(col="black", lwd=1.5) +    #lwd=1
tm_layout(main.title = "RASE stems per ha. 2022/24", title.size = 1.2, legend.text.size = 1.0) +
tm_shape(AFO_joined) +
tm_fill("Registreri", palette = c("white", "white", "white"), alpha=0, legend.show=FALSE) +
tm_borders(col="grey", lwd=1.5)      #lwd=2
RASEperHa
# Plot with tmap
RASEperHa <- tm_shape(AFO_joined) +
tm_graticules(alpha=0.3, n.x=3, n.y=6) +
tm_fill("AntalRASEHa", textNA = "NA", colorNA="#999999", title="",
palette=c("#E7CBA7", "#D3C6A0", "#80B6C0", "#37A7C9", "#0E6E96"),
breaks = c(0, 200, 400, 10000),
labels = c("< 200", "200 – 400", "> 400")) +
tm_borders(col="black", lwd=1.5) +    #lwd=1
tm_layout(main.title = "RASE stems per ha. 2022/24", title.size = 1.2, legend.text.size = 1.0) +
tm_shape(AFO_joined) +
tm_fill("Registreri", palette = c("white", "white", "white"), alpha=0, legend.show=FALSE) +
tm_borders(col="grey", lwd=1.5)      #lwd=2
RASEperHa
# Load the RColorBrewer package
library(RColorBrewer)
# Get the Zissou1 color palette with 5 colors
zissou1_colors <- brewer.pal(5, "Zissou1")
wesanderson::wes_palette("Zissou1", 100, type = "continuous")
install.packages("wesanderson")
This is a colour palette created with the following function: wesanderson::wes_palette("Zissou1", 100, type = "continuous") Wrapped as a standalone function to remove dependency of the wesanderson package.
wesanderson::wes_palette("Zissou1", 100, type = "continuous")
# Load the RColorBrewer package
library(RColorBrewer)
# Get the Zissou1 color palette with 5 colors
zissou1_colors <- brewer.pal(5, "Zissou1")
# Load the wesanderson package
library(wesanderson)
# Generate a continuous Zissou1 palette with 100 colors
zissou1_continuous <- wes_palette("Zissou1", 100, type = "continuous")
# Sample 5 evenly spaced colors from the palette
even_spaced_colors <- zissou1_continuous[seq(1, length(zissou1_continuous), length.out = 5)]
# Print the selected colors
even_spaced_colors
# Plot with tmap
RASEperHa <- tm_shape(AFO_joined) +
tm_graticules(alpha=0.3, n.x=3, n.y=6) +
tm_fill("AntalRASEHa", textNA = "NA", colorNA="#999999", title="",
palette=c("#F11B00", "#E98905", "#DACA50", "#99BDAD", "#3A9AB2"),
breaks = c(0, 200, 400, 10000),
labels = c("< 200", "200 – 400", "> 400")) +
tm_borders(col="black", lwd=1.5) +    #lwd=1
tm_layout(main.title = "RASE stems per ha. 2022/24", title.size = 1.2, legend.text.size = 1.0) +
tm_shape(AFO_joined) +
tm_fill("Registreri", palette = c("white", "white", "white"), alpha=0, legend.show=FALSE) +
tm_borders(col="grey", lwd=1.5)      #lwd=2
RASEperHa
# Plot with tmap
RASEperHa <- tm_shape(AFO_joined) +
tm_graticules(alpha=0.3, n.x=3, n.y=6) +
tm_fill("AntalRASEHa", textNA = "NA", colorNA="#999999", title="",
palette=c("#F11B00", "#E98905", "#3A9AB2"),
breaks = c(0, 200, 400, 10000),
labels = c("< 200", "200 – 400", "> 400")) +
tm_borders(col="black", lwd=1.5) +    #lwd=1
tm_layout(main.title = "RASE stems per ha. 2022/24", title.size = 1.2, legend.text.size = 1.0) +
tm_shape(AFO_joined) +
tm_fill("Registreri", palette = c("white", "white", "white"), alpha=0, legend.show=FALSE) +
tm_borders(col="grey", lwd=1.5)      #lwd=2
RASEperHa
# Plot with tmap
RASEperHa <- tm_shape(AFO_joined) +
tm_graticules(alpha=0.3, n.x=3, n.y=6) +
tm_fill("AntalRASEHa", textNA = "NA", colorNA="#999999", title="",
palette=c("#F11B00", "#E98905", "#DACA50", "#99BDAD", "#3A9AB2"),
breaks = c(0, 200, 400, 10000),
labels = c("< 200", "200 – 400", "> 400")) +
tm_borders(col="black", lwd=1.5) +    #lwd=1
tm_layout(main.title = "RASE stems per ha. 2022/24", title.size = 1.2, legend.text.size = 1.0) +
tm_shape(AFO_joined) +
tm_fill("Registreri", palette = c("white", "white", "white"), alpha=0, legend.show=FALSE) +
tm_borders(col="black", lwd=1.5)      #lwd=2
RASEperHa
install.packages("colorspace")
library(colorspace)
simulate_cvd(RASEperHa)
simulate_cvd("#F11B00", "#E98905", "#DACA50", "#99BDAD", "#3A9AB2")
??simulate_cvd()
# Deuteranopia (Red-Green Blindness)
zissou_deutan <- simulate_cvd(zissou_colors, "deutan")
simulate_cvd(c("#F11B00", "#DACA50", "#3A9AB2")
)
simulate_cvd(c("#F11B00", "#DACA50", "#3A9AB2"), severity = 0.6)
simulate_cvd(c("#005000", "blue", "#00BB00"), tritanomaly_cvd["6"][[1]])
simulate_cvd(c("#F11B00", "#DACA50", "#3A9AB2"), tritanomaly_cvd["6"][[1]]6)
simulate_cvd(c("#F11B00", "#DACA50", "#3A9AB2"), tritanomaly_cvd["6"][[1]])
