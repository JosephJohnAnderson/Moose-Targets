n_plots = mean(n_plots), Canopy_cover = mean(Canopy_cover)))  # use mean of n_plots for illustration
# Predict species richness
pred <- predict(gam_moose_eq, new_data, type = "response", se.fit = TRUE)
# Combine predictions with new_data
pred_df <- data.frame(new_data, Predicted = pred$fit, SE = pred$se.fit)
# Plot all browsers
Moose_eq_plot <- ggplot(pred_df, aes(x = Moose_eq_12, y = Predicted)) +
geom_line(aes(y = Predicted), color = "blue") +  # plot the predicted values with a line
geom_ribbon(aes(ymin = Predicted - 1.96 * SE, ymax = Predicted + 1.96 * SE), alpha = 0.2) +  # plot 95% confidence interval
theme_classic() +   # classic theme for better clarity
labs(x = "Average browser density", y = "Understory species richness",  title = "")+   # labels for x and y axes
geom_point(data = vegetation_tracts, aes(x = Moose_eq_12, y = Sum_richness), color = "darkgrey") +  # add observed data points
theme_classic()+    # classic theme for better clarity
annotate("text", x = max(vegetation_tracts$Moose_eq_12), y = max(vegetation_tracts$Sum_richness) - 0,
label = paste("%dev. =", round(model_summary$dev.expl*100, 1)), hjust = 1) +  # Add deviance explained
annotate("text", x = max(vegetation_tracts$Moose_eq_12), y = 0.9 * max(vegetation_tracts$Sum_richness),
label = ifelse(model_summary$s.table[1, "p-value"] < 0.001, "p < 0.001",
paste("p =", round(model_summary$s.table[1, "p-value"], 2))), hjust = 1)  # P-value annotation
Moose_eq_plot
# Fit a GAM for species richness versus browser density for separate browser groups
gam_browsers <- gam(Sum_richness ~ s(Moose_12, bs = "tp", k = 3) + s(Small_12, bs = "tp", k = 3) +
s(Red_12, bs = "tp", k = 3) +
# Canopy_cover +
n_plots,
data = vegetation_tracts, family = poisson)
# Print summary of the model
model_summary <- summary(gam_browsers)
model_summary
#Check the AIC
AIC(gam_browsers)
#Plot the model
plot(gam_browsers, select = 1, main = "Smooth Function of Moose Density")
plot(gam_browsers, select = 2, main = "Smooth Function of Small Deer Density")
plot(gam_browsers, select = 3, main = "Smooth Function of Red Deer Density")
# Generate data for Small Deer Density
new_data <- with(vegetation_tracts, expand.grid(
Moose_12 = mean(Moose_12),
Small_12 = seq(min(Small_12), max(Small_12), length.out = 100),
Red_12 = mean(Red_12),
n_plots = mean(n_plots),
Canopy_cover = mean(Canopy_cover)
))
# Predict species richness
pred <- predict(gam_browsers, new_data, type = "response", se.fit = TRUE)
pred_df <- data.frame(new_data, Predicted = pred$fit, SE = pred$se.fit)
# Plot Small deer density effect
Small_deer_plot <- ggplot(pred_df, aes(x = Small_12, y = Predicted)) +
geom_line(color = "blue") +
geom_ribbon(aes(ymin = Predicted - 1.96 * SE, ymax = Predicted + 1.96 * SE), alpha = 0.2) +
geom_point(data = vegetation_tracts, aes(x = Small_12, y = Sum_richness), color = "darkgrey") +
theme_classic() +
labs(x = "Small Deer Density", y = "Understory Species Richness", title = "B") +
annotate("text", x = max(vegetation_tracts$Small_12), y = max(vegetation_tracts$Sum_richness),
label = paste("% dev. =", round(summary(gam_browsers)$dev.expl * 100, 1)), hjust = 1) +
annotate("text", x = max(vegetation_tracts$Small_12), y = 0.9 * max(vegetation_tracts$Sum_richness),
label = ifelse(summary(gam_browsers)$s.table[2, "p-value"] < 0.001, "p < 0.001",
paste("p =", round(summary(gam_browsers)$s.table[2, "p-value"], 2))), hjust = 1)
Small_deer_plot
# Plot Small deer density effect
Small_deer_plot <- ggplot(pred_df, aes(x = Small_12, y = Predicted)) +
geom_line(color = "blue") +
geom_ribbon(aes(ymin = Predicted - 1.96 * SE, ymax = Predicted + 1.96 * SE), alpha = 0.2) +
geom_point(data = vegetation_tracts, aes(x = Small_12, y = Sum_richness), color = "darkgrey") +
theme_classic() +
labs(x = "Small Deer Density", y = "Understory Species Richness", title = "B") +
annotate("text", x = max(vegetation_tracts$Small_12), y = max(vegetation_tracts$Sum_richness),
label = paste("% dev. =", round(summary(gam_browsers)$dev.expl * 100, 1)), hjust = 1) +
annotate("text", x = max(vegetation_tracts$Small_12), y = 0.9 * max(vegetation_tracts$Sum_richness),
label = ifelse(summary(gam_browsers)$s.table[2, "p-value"] < 0.001, "p < 0.001",
paste("p =", round(summary(gam_browsers)$s.table[2, "p-value"], 3))), hjust = 1)
Small_deer_plot
# Generate data for Moose Density
new_data <- with(vegetation_tracts, expand.grid(
Moose_12 = seq(min(Moose_12), max(Moose_12), length.out = 100),
Small_12 = mean(Small_12),
Red_12 = mean(Red_12),
n_plots = mean(n_plots),
Canopy_cover = mean(Canopy_cover)
))
# Predict species richness
pred <- predict(gam_browsers, new_data, type = "response", se.fit = TRUE)
pred_df <- data.frame(new_data, Predicted = pred$fit, SE = pred$se.fit)
# Plot Moose density effect
Moose_plot <- ggplot(pred_df, aes(x = Moose_12, y = Predicted)) +
geom_line(color = "blue") +
geom_ribbon(aes(ymin = Predicted - 1.96 * SE, ymax = Predicted + 1.96 * SE), alpha = 0.2) +
geom_point(data = vegetation_tracts, aes(x = Moose_12, y = Sum_richness), color = "darkgrey") +
theme_classic() +
labs(x = "Moose Density", y = "Understory Species Richness", title = "C") +
annotate("text", x = max(vegetation_tracts$Moose_12), y = max(vegetation_tracts$Sum_richness),
label = paste("% dev. =", round(summary(gam_browsers)$dev.expl * 100, 1)), hjust = 1) +
annotate("text", x = max(vegetation_tracts$Moose_12), y = 0.9 * max(vegetation_tracts$Sum_richness),
label = ifelse(summary(gam_browsers)$s.table[1, "p-value"] < 0.001, "p < 0.001",
paste("p =", round(summary(gam_browsers)$s.table[1, "p-value"], 2))), hjust = 1)
Moose_plot
# Generate data for Red deer Density
new_data <- with(vegetation_tracts, expand.grid(
Moose_12 = mean(Moose_12),
Small_12 = mean(Small_12),
Red_12 = seq(min(Red_12), max(Red_12), length.out = 100),
n_plots = mean(n_plots),
Canopy_cover = mean(Canopy_cover)
))
# Predict species richness
pred <- predict(gam_browsers, new_data, type = "response", se.fit = TRUE)
pred_df <- data.frame(new_data, Predicted = pred$fit, SE = pred$se.fit)
# Plot Red Deer Density effect
Red_Deer_plot <- ggplot(pred_df, aes(x = Red_12, y = Predicted)) +
geom_line(color = "blue") +
geom_ribbon(aes(ymin = Predicted - 1.96 * SE, ymax = Predicted + 1.96 * SE), alpha = 0.2) +
geom_point(data = vegetation_tracts, aes(x = Red_12, y = Sum_richness), color = "darkgrey") +
theme_classic() +
labs(x = "Red Deer Density", y = "Understory Species Richness", title = "D") +
annotate("text", x = max(vegetation_tracts$Red_12), y = max(vegetation_tracts$Sum_richness),
label = paste("% dev. =", round(summary(gam_browsers)$dev.expl * 100, 1)), hjust = 1) +
annotate("text", x = max(vegetation_tracts$Red_12), y = 0.9 * max(vegetation_tracts$Sum_richness),
label = ifelse(summary(gam_browsers)$s.table[3, "p-value"] < 0.001, "p < 0.001",
paste("p =", round(summary(gam_browsers)$s.table[3, "p-value"], 2))), hjust = 1)
Red_deer_plot
# Plot Red Deer Density effect
Red_deer_plot <- ggplot(pred_df, aes(x = Red_12, y = Predicted)) +
geom_line(color = "blue") +
geom_ribbon(aes(ymin = Predicted - 1.96 * SE, ymax = Predicted + 1.96 * SE), alpha = 0.2) +
geom_point(data = vegetation_tracts, aes(x = Red_12, y = Sum_richness), color = "darkgrey") +
theme_classic() +
labs(x = "Red Deer Density", y = "Understory Species Richness", title = "D") +
annotate("text", x = max(vegetation_tracts$Red_12), y = max(vegetation_tracts$Sum_richness),
label = paste("% dev. =", round(summary(gam_browsers)$dev.expl * 100, 1)), hjust = 1) +
annotate("text", x = max(vegetation_tracts$Red_12), y = 0.9 * max(vegetation_tracts$Sum_richness),
label = ifelse(summary(gam_browsers)$s.table[3, "p-value"] < 0.001, "p < 0.001",
paste("p =", round(summary(gam_browsers)$s.table[3, "p-value"], 2))), hjust = 1)
Red_deer_plot
rm(Red_Deer_plot)
# Combine the four plots into a 2x2 grid
Combined_plot <- (Moose_eq_plot | Small_deer_plot) /
(Moose_plot | Red_deer_plot)
Combined_plot
# Generate data for plotting predictions
new_data <- with(vegetation_tracts, expand.grid(Moose_eq_12 = seq(min(Moose_eq_12), max(Moose_eq_12), length.out = 100),
n_plots = mean(n_plots), Canopy_cover = mean(Canopy_cover)))  # use mean of n_plots for illustration
# Predict species richness
pred <- predict(gam_moose_eq, new_data, type = "response", se.fit = TRUE)
# Combine predictions with new_data
pred_df <- data.frame(new_data, Predicted = pred$fit, SE = pred$se.fit)
# Plot all browsers
Moose_eq_plot <- ggplot(pred_df, aes(x = Moose_eq_12, y = Predicted)) +
geom_line(aes(y = Predicted), color = "blue") +  # plot the predicted values with a line
geom_ribbon(aes(ymin = Predicted - 1.96 * SE, ymax = Predicted + 1.96 * SE), alpha = 0.2) +  # plot 95% confidence interval
theme_classic() +   # classic theme for better clarity
labs(x = "Average browser density", y = "Understory species richness",  title = "A")+   # labels for x and y axes
geom_point(data = vegetation_tracts, aes(x = Moose_eq_12, y = Sum_richness), color = "darkgrey") +  # add observed data points
theme_classic()+    # classic theme for better clarity
annotate("text", x = max(vegetation_tracts$Moose_eq_12), y = max(vegetation_tracts$Sum_richness) - 0,
label = paste("%dev. =", round(model_summary$dev.expl*100, 1)), hjust = 1) +  # Add deviance explained
annotate("text", x = max(vegetation_tracts$Moose_eq_12), y = 0.9 * max(vegetation_tracts$Sum_richness),
label = ifelse(model_summary$s.table[1, "p-value"] < 0.001, "p < 0.001",
paste("p =", round(model_summary$s.table[1, "p-value"], 2))), hjust = 1)  # P-value annotation
Moose_eq_plot
# Combine the four plots into a 2x2 grid
Combined_plot <- (Moose_eq_plot | Small_deer_plot) /
(Moose_plot | Red_deer_plot)
Combined_plot
# Fit a GAM for species richness versus browser density
gam_moose_eq <- gam(Sum_richness ~ s(Moose_eq_12, bs = "tp", k = 3) +
# Canopy_cover +
n_plots,
data = vegetation_tracts, family = poisson)
gam.check(gam_moose_eq)
# Print summary of the model
model_summary <- summary(gam_moose_eq)
model_summary
#Check the AIC
AIC(gam_moose_eq)
# Visualize the GAM fit
plot(gam_moose_eq, select = 1, main = "Smooth Function of Browser Density")
# Generate data for plotting predictions
new_data <- with(vegetation_tracts, expand.grid(Moose_eq_12 = seq(min(Moose_eq_12), max(Moose_eq_12), length.out = 100),
n_plots = mean(n_plots), Canopy_cover = mean(Canopy_cover)))  # use mean of n_plots for illustration
# Predict species richness
pred <- predict(gam_moose_eq, new_data, type = "response", se.fit = TRUE)
# Combine predictions with new_data
pred_df <- data.frame(new_data, Predicted = pred$fit, SE = pred$se.fit)
# Fit a GAM for species richness versus browser density
gam_moose_eq <- gam(Sum_richness ~ s(Moose_eq_12, bs = "tp", k = 3) +
# Canopy_cover +
n_plots,
data = vegetation_tracts, family = poisson)
gam.check(gam_moose_eq)
# Print summary of the model
model_summary <- summary(gam_moose_eq)
model_summary
#Check the AIC
AIC(gam_moose_eq)
# Visualize the GAM fit
plot(gam_moose_eq, select = 1, main = "Smooth Function of Browser Density")
# Generate data for plotting predictions
new_data <- with(vegetation_tracts, expand.grid(Moose_eq_12 = seq(min(Moose_eq_12), max(Moose_eq_12), length.out = 100),
n_plots = mean(n_plots), Canopy_cover = mean(Canopy_cover)))  # use mean of n_plots for illustration
# Predict species richness
pred <- predict(gam_moose_eq, new_data, type = "response", se.fit = TRUE)
# Combine predictions with new_data
pred_df <- data.frame(new_data, Predicted = pred$fit, SE = pred$se.fit)
# Plot all browsers
Moose_eq_plot <- ggplot(pred_df, aes(x = Moose_eq_12, y = Predicted)) +
geom_line(aes(y = Predicted), color = "blue") +  # plot the predicted values with a line
geom_ribbon(aes(ymin = Predicted - 1.96 * SE, ymax = Predicted + 1.96 * SE), alpha = 0.2) +  # plot 95% confidence interval
theme_classic() +   # classic theme for better clarity
labs(x = "Average browser density", y = "Understory species richness",  title = "A")+   # labels for x and y axes
geom_point(data = vegetation_tracts, aes(x = Moose_eq_12, y = Sum_richness), color = "darkgrey") +  # add observed data points
theme_classic()+    # classic theme for better clarity
annotate("text", x = max(vegetation_tracts$Moose_eq_12), y = max(vegetation_tracts$Sum_richness) - 0,
label = paste("%dev. =", round(model_summary$dev.expl*100, 1)), hjust = 1) +  # Add deviance explained
annotate("text", x = max(vegetation_tracts$Moose_eq_12), y = 0.9 * max(vegetation_tracts$Sum_richness),
label = ifelse(model_summary$s.table[1, "p-value"] < 0.001, "p < 0.001",
paste("p =", round(model_summary$s.table[1, "p-value"], 2))), hjust = 1)  # P-value annotation
Moose_eq_plot
# Combine the four plots into a 2x2 grid
Combined_plot <- (Moose_eq_plot | Small_deer_plot) /
(Moose_plot | Red_deer_plot)
Combined_plot
# Fit a GAM for species richness versus browser density for separate browser groups
gam_browsers <- gam(Sum_richness ~ s(Moose_12, bs = "tp", k = 3) + s(Small_12, bs = "tp", k = 3) +
s(Red_12, bs = "tp", k = 3) +
# Canopy_cover +
n_plots,
data = vegetation_tracts, family = poisson)
gam.check(gam_browsers)
# Print summary of the model
model_summary <- summary(gam_browsers)
model_summary
#Check the AIC
AIC(gam_browsers)
#Plot the model
plot(gam_browsers, select = 1, main = "Smooth Function of Moose Density")
plot(gam_browsers, select = 2, main = "Smooth Function of Small Deer Density")
plot(gam_browsers, select = 3, main = "Smooth Function of Red Deer Density")
# Generate data for Small Deer Density
new_data <- with(vegetation_tracts, expand.grid(
Moose_12 = mean(Moose_12),
Small_12 = seq(min(Small_12), max(Small_12), length.out = 100),
Red_12 = mean(Red_12),
n_plots = mean(n_plots),
Canopy_cover = mean(Canopy_cover)
))
# Predict species richness
pred <- predict(gam_browsers, new_data, type = "response", se.fit = TRUE)
pred_df <- data.frame(new_data, Predicted = pred$fit, SE = pred$se.fit)
# Plot Small deer density effect
Small_deer_plot <- ggplot(pred_df, aes(x = Small_12, y = Predicted)) +
geom_line(color = "blue") +
geom_ribbon(aes(ymin = Predicted - 1.96 * SE, ymax = Predicted + 1.96 * SE), alpha = 0.2) +
geom_point(data = vegetation_tracts, aes(x = Small_12, y = Sum_richness), color = "darkgrey") +
theme_classic() +
labs(x = "Small deer density", y = "Understory species richness", title = "B") +
annotate("text", x = max(vegetation_tracts$Small_12), y = max(vegetation_tracts$Sum_richness),
label = paste("% dev. =", round(summary(gam_browsers)$dev.expl * 100, 1)), hjust = 1) +
annotate("text", x = max(vegetation_tracts$Small_12), y = 0.9 * max(vegetation_tracts$Sum_richness),
label = ifelse(summary(gam_browsers)$s.table[2, "p-value"] < 0.001, "p < 0.001",
paste("p =", round(summary(gam_browsers)$s.table[2, "p-value"], 3))), hjust = 1)
Small_deer_plot
# Generate data for Moose Density
new_data <- with(vegetation_tracts, expand.grid(
Moose_12 = seq(min(Moose_12), max(Moose_12), length.out = 100),
Small_12 = mean(Small_12),
Red_12 = mean(Red_12),
n_plots = mean(n_plots),
Canopy_cover = mean(Canopy_cover)
))
# Predict species richness
pred <- predict(gam_browsers, new_data, type = "response", se.fit = TRUE)
pred_df <- data.frame(new_data, Predicted = pred$fit, SE = pred$se.fit)
# Plot Moose density effect
Moose_plot <- ggplot(pred_df, aes(x = Moose_12, y = Predicted)) +
geom_line(color = "blue") +
geom_ribbon(aes(ymin = Predicted - 1.96 * SE, ymax = Predicted + 1.96 * SE), alpha = 0.2) +
geom_point(data = vegetation_tracts, aes(x = Moose_12, y = Sum_richness), color = "darkgrey") +
theme_classic() +
labs(x = "Moose density", y = "Understory species richness", title = "C") +
annotate("text", x = max(vegetation_tracts$Moose_12), y = max(vegetation_tracts$Sum_richness),
label = paste("% dev. =", round(summary(gam_browsers)$dev.expl * 100, 1)), hjust = 1) +
annotate("text", x = max(vegetation_tracts$Moose_12), y = 0.9 * max(vegetation_tracts$Sum_richness),
label = ifelse(summary(gam_browsers)$s.table[1, "p-value"] < 0.001, "p < 0.001",
paste("p =", round(summary(gam_browsers)$s.table[1, "p-value"], 3))), hjust = 1)
Moose_plot
# Generate data for Red deer Density
new_data <- with(vegetation_tracts, expand.grid(
Moose_12 = mean(Moose_12),
Small_12 = mean(Small_12),
Red_12 = seq(min(Red_12), max(Red_12), length.out = 100),
n_plots = mean(n_plots),
Canopy_cover = mean(Canopy_cover)
))
# Predict species richness
pred <- predict(gam_browsers, new_data, type = "response", se.fit = TRUE)
pred_df <- data.frame(new_data, Predicted = pred$fit, SE = pred$se.fit)
# Plot Red Deer Density effect
Red_deer_plot <- ggplot(pred_df, aes(x = Red_12, y = Predicted)) +
geom_line(color = "blue") +
geom_ribbon(aes(ymin = Predicted - 1.96 * SE, ymax = Predicted + 1.96 * SE), alpha = 0.2) +
geom_point(data = vegetation_tracts, aes(x = Red_12, y = Sum_richness), color = "darkgrey") +
theme_classic() +
labs(x = "Red deer density", y = "Understory species richness", title = "D") +
annotate("text", x = max(vegetation_tracts$Red_12), y = max(vegetation_tracts$Sum_richness),
label = paste("% dev. =", round(summary(gam_browsers)$dev.expl * 100, 1)), hjust = 1) +
annotate("text", x = max(vegetation_tracts$Red_12), y = 0.9 * max(vegetation_tracts$Sum_richness),
label = ifelse(summary(gam_browsers)$s.table[3, "p-value"] < 0.001, "p < 0.001",
paste("p =", round(summary(gam_browsers)$s.table[3, "p-value"], 2))), hjust = 1)
Red_deer_plot
# Combine the four plots into a 2x2 grid
Combined_plot <- (Moose_eq_plot | Small_deer_plot) /
(Moose_plot | Red_deer_plot)
Combined_plot
## Export with ggsave (change file name/path depending on species)
ggsave("Browsers_GAM_2x2.tiff", plot = Combined_plot, device = NULL, path = "~/GitHub/P1_field_layer/Plots",
scale = 1.0, width = 15, height = 15, dpi = 300, limitsize = TRUE, units = "cm")
# Fit a GAM for species richness versus browser density
gam_moose_eq <- gam(Sum_richness ~ s(Moose_eq_12, bs = "tp", k = 3) +
# Canopy_cover +
n_plots,
data = vegetation_tracts, family = poisson)
gam.check(gam_moose_eq)
# Print summary of the model
model_summary <- summary(gam_moose_eq)
model_summary
#Check the AIC
AIC(gam_moose_eq)
# Visualize the GAM fit
plot(gam_moose_eq, select = 1, main = "Smooth Function of Browser Density")
# Generate data for plotting predictions
new_data <- with(vegetation_tracts, expand.grid(Moose_eq_12 = seq(min(Moose_eq_12), max(Moose_eq_12), length.out = 100),
n_plots = mean(n_plots), Canopy_cover = mean(Canopy_cover)))  # use mean of n_plots for illustration
# Predict species richness
pred <- predict(gam_moose_eq, new_data, type = "response", se.fit = TRUE)
# Combine predictions with new_data
pred_df <- data.frame(new_data, Predicted = pred$fit, SE = pred$se.fit)
# Plot all browsers
Moose_eq_plot <- ggplot(pred_df, aes(x = Moose_eq_12, y = Predicted)) +
geom_line(aes(y = Predicted), color = "blue") +  # plot the predicted values with a line
geom_ribbon(aes(ymin = Predicted - 1.96 * SE, ymax = Predicted + 1.96 * SE), alpha = 0.2) +  # plot 95% confidence interval
theme_classic() +   # classic theme for better clarity
labs(x = "Average browser density (moose equivalents)", y = "Understory species richness",  title = "A")+   # labels for x and y axes
geom_point(data = vegetation_tracts, aes(x = Moose_eq_12, y = Sum_richness), color = "darkgrey") +  # add observed data points
theme_classic()+    # classic theme for better clarity
annotate("text", x = max(vegetation_tracts$Moose_eq_12), y = max(vegetation_tracts$Sum_richness) - 0,
label = paste("%dev. =", round(model_summary$dev.expl*100, 1)), hjust = 1) +  # Add deviance explained
annotate("text", x = max(vegetation_tracts$Moose_eq_12), y = 0.9 * max(vegetation_tracts$Sum_richness),
label = ifelse(model_summary$s.table[1, "p-value"] < 0.001, "p < 0.001",
paste("p =", round(model_summary$s.table[1, "p-value"], 2))), hjust = 1)  # P-value annotation
Moose_eq_plot
# Plot all browsers
Moose_eq_plot <- ggplot(pred_df, aes(x = Moose_eq_12, y = Predicted)) +
geom_line(aes(y = Predicted), color = "blue") +  # plot the predicted values with a line
geom_ribbon(aes(ymin = Predicted - 1.96 * SE, ymax = Predicted + 1.96 * SE), alpha = 0.2) +  # plot 95% confidence interval
theme_classic() +   # classic theme for better clarity
labs(x = "Average browser density (moose equivalents)", y = "Understory species richness",  title = "A")+   # labels for x and y axes
geom_point(data = vegetation_tracts, aes(x = Moose_eq_12, y = Sum_richness), color = "darkgrey") +  # add observed data points
theme_classic()+    # classic theme for better clarity
annotate("text", x = max(vegetation_tracts$Moose_eq_12), y = max(vegetation_tracts$Sum_richness) - 0,
label = paste("%dev. =", round(model_summary$dev.expl*100, 1)), hjust = 1) +  # Add deviance explained
annotate("text", x = max(vegetation_tracts$Moose_eq_12), y = 0.9 * max(vegetation_tracts$Sum_richness),
label = ifelse(model_summary$s.table[1, "p-value"] < 0.001, "p < 0.001",
paste("p =", round(model_summary$s.table[1, "p-value"], 2))), hjust = 1)  # P-value annotation
Moose_eq_plot
# Combine the four plots into a 2x2 grid
Combined_plot <- (Moose_eq_plot | Small_deer_plot) /
(Moose_plot | Red_deer_plot)
Combined_plot
## Export with ggsave (change file name/path depending on species)
ggsave("Browsers_GAM_2x2.tiff", plot = Combined_plot, device = NULL, path = "~/GitHub/P1_field_layer/Plots",
scale = 1.0, width = 15, height = 15, dpi = 300, limitsize = TRUE, units = "cm")
# Plot all browsers
Moose_eq_plot <- ggplot(pred_df, aes(x = Moose_eq_12, y = Predicted)) +
geom_line(aes(y = Predicted), color = "blue") +  # plot the predicted values with a line
geom_ribbon(aes(ymin = Predicted - 1.96 * SE, ymax = Predicted + 1.96 * SE), alpha = 0.2) +  # plot 95% confidence interval
theme_classic() +   # classic theme for better clarity
labs(x = "Browser density (moose equivalents)", y = "Understory species richness",  title = "A")+   # labels for x and y axes
geom_point(data = vegetation_tracts, aes(x = Moose_eq_12, y = Sum_richness), color = "darkgrey") +  # add observed data points
theme_classic()+    # classic theme for better clarity
annotate("text", x = max(vegetation_tracts$Moose_eq_12), y = max(vegetation_tracts$Sum_richness) - 0,
label = paste("%dev. =", round(model_summary$dev.expl*100, 1)), hjust = 1) +  # Add deviance explained
annotate("text", x = max(vegetation_tracts$Moose_eq_12), y = 0.9 * max(vegetation_tracts$Sum_richness),
label = ifelse(model_summary$s.table[1, "p-value"] < 0.001, "p < 0.001",
paste("p =", round(model_summary$s.table[1, "p-value"], 2))), hjust = 1)  # P-value annotation
Moose_eq_plot
# Combine the four plots into a 2x2 grid
Combined_plot <- (Moose_eq_plot | Small_deer_plot) /
(Moose_plot | Red_deer_plot)
Combined_plot
## Export with ggsave (change file name/path depending on species)
ggsave("Browsers_GAM_2x2.tiff", plot = Combined_plot, device = NULL, path = "~/GitHub/P1_field_layer/Plots",
scale = 1.0, width = 15, height = 15, dpi = 300, limitsize = TRUE, units = "cm")
# Check for potential collinearity
cor_matrix <- cor(vegetation_tracts[, c("Moose_eq_12", "Moose_12", "Small_12", "n_plots",
"Canopy_cover", "Leaf_litter_cover", "Mineral_soil_cover")], method = "pearson")
# Filter correlations greater than 0.7 or less than -0.7, excluding 1
filtered_cor <- cor_matrix
filtered_cor[abs(filtered_cor) <= 0.7 | abs(filtered_cor) == 1] <- NA
# View the filtered correlation matrix
filtered_cor
# Fit a GAM for mineral soil cover versus browser density
gam_soil <- gam(Mineral_soil_cover/100 ~ s(Moose_eq_12, bs = "tp", k = 3), data = vegetation_tracts, family = betar(link = "logit"))
gam.check(gam_soil)
# Print summary of the model
summary(gam_soil)
#Check the AIC
AIC(gam_soil)
#Plot the model
plot(gam_soil, select = 1, main = "Smooth Function of Browser Density")
# Generate data for plotting predictions
new_data <- with(vegetation_tracts, expand.grid(
Moose_eq_12 = seq(min(Moose_eq_12), max(Moose_eq_12), length.out = 100)
))
# Predict mineral soil cover
pred <- predict(gam_soil, new_data, type = "response", se.fit = TRUE)
# Combine predictions with new_data
pred_df <- data.frame(new_data, Predicted = pred$fit, SE = pred$se.fit)
# Plot mineral soil cover ~ browser density
SOil_plot_b <- ggplot(pred_df, aes(x = Moose_eq_12, y = Predicted)) +
geom_line(color = "blue") +  # Plot the predicted values with a line
geom_ribbon(aes(ymin = Predicted - 1.96 * SE, ymax = Predicted + 1.96 * SE), alpha = 0.2) +  # 95% CI
geom_point(data = vegetation_tracts, aes(x = Moose_eq_12, y = Shrubs_cover / 100), color = "darkgrey") +  # Observed data
theme_classic() +  # Use a clean theme
labs(x = "Average browser density", y = "Dwarf shrub cover (proportion)", title = "B") +  # Axis labels
annotate("text", x = max(vegetation_tracts$Moose_eq_12), y = 1.0 * max(vegetation_tracts$Shrubs_cover/100),
label = paste("% dev. =", round(model_summary$dev.expl * 100, 1)), hjust = 1) +  # Deviance explained
annotate("text", x = max(vegetation_tracts$Moose_eq_12), y = 0.9 * max(vegetation_tracts$Shrubs_cover/100),
label = ifelse(model_summary$s.table[1, "p-value"] < 0.001, "p < 0.001",
paste("p =", round(model_summary$s.table[1, "p-value"], 5))), hjust = 1)  # P-value annotation
# Plot mineral soil cover ~ browser density
Soil_plot_b <- ggplot(pred_df, aes(x = Moose_eq_12, y = Predicted)) +
geom_line(color = "blue") +  # Plot the predicted values with a line
geom_ribbon(aes(ymin = Predicted - 1.96 * SE, ymax = Predicted + 1.96 * SE), alpha = 0.2) +  # 95% CI
geom_point(data = vegetation_tracts, aes(x = Moose_eq_12, y = Shrubs_cover / 100), color = "darkgrey") +  # Observed data
theme_classic() +  # Use a clean theme
labs(x = "Average browser density", y = "Dwarf shrub cover (proportion)", title = "B") +  # Axis labels
annotate("text", x = max(vegetation_tracts$Moose_eq_12), y = 1.0 * max(vegetation_tracts$Shrubs_cover/100),
label = paste("% dev. =", round(model_summary$dev.expl * 100, 1)), hjust = 1) +  # Deviance explained
annotate("text", x = max(vegetation_tracts$Moose_eq_12), y = 0.9 * max(vegetation_tracts$Shrubs_cover/100),
label = ifelse(model_summary$s.table[1, "p-value"] < 0.001, "p < 0.001",
paste("p =", round(model_summary$s.table[1, "p-value"], 5))), hjust = 1)  # P-value annotation
Soil_plot_b
# Plot mineral soil cover ~ browser density
Soil_plot_b <- ggplot(pred_df, aes(x = Moose_eq_12, y = Predicted)) +
geom_line(color = "blue") +  # Plot the predicted values with a line
geom_ribbon(aes(ymin = Predicted - 1.96 * SE, ymax = Predicted + 1.96 * SE), alpha = 0.2) +  # 95% CI
geom_point(data = vegetation_tracts, aes(x = Moose_eq_12, y = Mineral_soil_cover / 100), color = "darkgrey") +  # Observed data
theme_classic() +  # Use a clean theme
labs(x = "Average browser density", y = "Dwarf shrub cover (proportion)", title = "B") +  # Axis labels
annotate("text", x = max(vegetation_tracts$Moose_eq_12), y = 1.0 * max(vegetation_tracts$Mineral_soil_cover/100),
label = paste("% dev. =", round(model_summary$dev.expl * 100, 1)), hjust = 1) +  # Deviance explained
annotate("text", x = max(vegetation_tracts$Moose_eq_12), y = 0.9 * max(vegetation_tracts$Mineral_soil_cover/100),
label = ifelse(model_summary$s.table[1, "p-value"] < 0.001, "p < 0.001",
paste("p =", round(model_summary$s.table[1, "p-value"], 5))), hjust = 1)  # P-value annotation
Soil_plot_b
# Fit a GAM for mineral soil cover versus browser density
gam_soil <- gam(Mineral_soil_cover/100 ~ s(Moose_eq_12, bs = "tp", k = 3), data = vegetation_tracts, family = betar(link = "logit"))
# Print summary of the model
summary(gam_soil)
#Check the AIC
AIC(gam_soil)
#Plot the model
plot(gam_soil, select = 1, main = "Smooth Function of Browser Density")
# Generate data for plotting predictions
new_data <- with(vegetation_tracts, expand.grid(
Moose_eq_12 = seq(min(Moose_eq_12), max(Moose_eq_12), length.out = 100)
))
# Predict mineral soil cover
pred <- predict(gam_soil, new_data, type = "response", se.fit = TRUE)
# Combine predictions with new_data
pred_df <- data.frame(new_data, Predicted = pred$fit, SE = pred$se.fit)
# Plot mineral soil cover ~ browser density
Soil_plot_b <- ggplot(pred_df, aes(x = Moose_eq_12, y = Predicted)) +
geom_line(color = "blue") +  # Plot the predicted values with a line
geom_ribbon(aes(ymin = Predicted - 1.96 * SE, ymax = Predicted + 1.96 * SE), alpha = 0.2) +  # 95% CI
geom_point(data = vegetation_tracts, aes(x = Moose_eq_12, y = Mineral_soil_cover / 100), color = "darkgrey") +  # Observed data
theme_classic() +  # Use a clean theme
labs(x = "Average browser density", y = "Mineral soil cover (proportion)", title = "B") +  # Axis labels
annotate("text", x = max(vegetation_tracts$Moose_eq_12), y = 1.0 * max(vegetation_tracts$Mineral_soil_cover/100),
label = paste("% dev. =", round(model_summary$dev.expl * 100, 1)), hjust = 1) +  # Deviance explained
annotate("text", x = max(vegetation_tracts$Moose_eq_12), y = 0.9 * max(vegetation_tracts$Mineral_soil_cover/100),
label = ifelse(model_summary$s.table[1, "p-value"] < 0.001, "p < 0.001",
paste("p =", round(model_summary$s.table[1, "p-value"], 5))), hjust = 1)  # P-value annotation
Soil_plot_b
# Tract data
vegetation_tracts <- read_delim("~/GitHub/P1_field_layer/Vegetation_tracts.csv",
delim = ";", escape_double = FALSE, locale = locale(decimal_mark = ",",
encoding = "WINDOWS-1252"), trim_ws = TRUE)
# Plot data
vegetation <- read_delim("~/GitHub/P1_field_layer/Vegetation.csv",
delim = ";", escape_double = FALSE, col_types = cols(Max_avg_moose_equivalent_density_5y = col_double(),
Max_avg_moose_equivalent_density_12y = col_double()),
locale = locale(decimal_mark = ",", encoding = "WINDOWS-1252"),
trim_ws = TRUE)
# Check for potential collinearity
cor_matrix <- cor(vegetation_tracts[, c("Moose_eq_12", "Moose_12", "Small_12", "n_plots",
"Canopy_cover", "Leaf_litter_cover", "Mineral_soil_cover")], method = "pearson")
# Filter correlations greater than 0.7 or less than -0.7, excluding 1
filtered_cor <- cor_matrix
filtered_cor[abs(filtered_cor) <= 0.7 | abs(filtered_cor) == 1] <- NA
# View the filtered correlation matrix
filtered_cor
# Fit a GAM for mineral soil cover versus browser density
gam_soil <- gam(Mineral_soil_cover/100 ~ s(Moose_eq_12, bs = "tp", k = 3), data = vegetation_tracts, family = betar(link = "logit"))
gam.check(gam_soil)
# Print summary of the model
summary(gam_soil)
#Check the AIC
AIC(gam_soil)
#Check the AIC
AIC(gam_soil)
#Plot the model
plot(gam_soil, select = 1, main = "Smooth Function of Browser Density")
