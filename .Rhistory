annotate("text", x = max(vegetation_tracts$Moose_12), y = max(vegetation_tracts$Sum_richness) - 5,
label = paste("p =", round(model_summary$s.table[1, "p-value"], 8)), hjust = 1)   # Add p-value
Moose_plot
# Plot moose
Moose_plot <- ggplot(pred_df, aes(x = Moose_12, y = Predicted)) +
geom_line(aes(y = Predicted), color = "blue") +  # plot the predicted values with a line
geom_ribbon(aes(ymin = Predicted - 1.96 * SE, ymax = Predicted + 1.96 * SE), alpha = 0.2) +  # plot 95% confidence interval
theme_classic() +   # classic theme for better clarity
labs(x = "Average moose density", y = "Understory species richness")+   # labels for x and y axes
geom_point(data = vegetation_tracts, aes(x = Moose_12, y = Sum_richness), color = "darkgrey") +  # add observed data points
theme_classic()+    # classic theme for better clarity
annotate("text", x = max(vegetation_tracts$Moose_12), y = max(vegetation_tracts$Sum_richness) - 0,
label = paste("%dev. =", round(model_summary$dev.expl*100, 1)), hjust = 1) +  # Add deviance explained
annotate("text", x = max(vegetation_tracts$Moose_12), y = max(vegetation_tracts$Sum_richness) - 5,
label = paste("p =", round(model_summary$s.table[1, "p-value"], 5)), hjust = 1)   # Add p-value
Moose_plot
# Plot moose
Moose_plot <- ggplot(pred_df, aes(x = Moose_12, y = Predicted)) +
geom_line(aes(y = Predicted), color = "blue") +  # plot the predicted values with a line
geom_ribbon(aes(ymin = Predicted - 1.96 * SE, ymax = Predicted + 1.96 * SE), alpha = 0.2) +  # plot 95% confidence interval
theme_classic() +   # classic theme for better clarity
labs(x = "Average moose density", y = "Understory species richness")+   # labels for x and y axes
geom_point(data = vegetation_tracts, aes(x = Moose_12, y = Sum_richness), color = "darkgrey") +  # add observed data points
theme_classic()+    # classic theme for better clarity
annotate("text", x = max(vegetation_tracts$Moose_12), y = max(vegetation_tracts$Sum_richness) - 0,
label = paste("%dev. =", round(model_summary$dev.expl*100, 1)), hjust = 1) +  # Add deviance explained
annotate("text", x = max(vegetation_tracts$Moose_12), y = max(vegetation_tracts$Sum_richness) - 5,
label = paste("p =", round(model_summary$s.table[1, "p-value"], 15)), hjust = 1)   # Add p-value
Moose_plot
# Plot moose
Moose_plot <- ggplot(pred_df, aes(x = Moose_12, y = Predicted)) +
geom_line(aes(y = Predicted), color = "blue") +  # plot the predicted values with a line
geom_ribbon(aes(ymin = Predicted - 1.96 * SE, ymax = Predicted + 1.96 * SE), alpha = 0.2) +  # plot 95% confidence interval
theme_classic() +   # classic theme for better clarity
labs(x = "Average moose density", y = "Understory species richness")+   # labels for x and y axes
geom_point(data = vegetation_tracts, aes(x = Moose_12, y = Sum_richness), color = "darkgrey") +  # add observed data points
theme_classic()+    # classic theme for better clarity
annotate("text", x = max(vegetation_tracts$Moose_12), y = max(vegetation_tracts$Sum_richness) - 0,
label = paste("%dev. =", round(model_summary$dev.expl*100, 1)), hjust = 1) +  # Add deviance explained
annotate("text", x = max(vegetation_tracts$Moose_12), y = max(vegetation_tracts$Sum_richness) - 5,
label = paste("p =", round(model_summary$s.table[1, "p-value"], 8)), hjust = 1)   # Add p-value
Moose_plot
# Fit a GAM for species richness versus moose density
gam_moose <- gam(Sum_richness ~ s(Moose_12, bs = "tp", k = 3) + n_plots,
data = vegetation_tracts, family = poisson)
gam.check(gam_moose)
# Print summary of the model
model_summary <- summary(gam_moose)
model_summary
#Check the AIC
AIC(gam_moose)
# Visualize the GAM fit
plot(gam_moose, select = 1, main = "Smooth Function of Browser Density")
# Generate data for plotting predictions
new_data <- with(vegetation_tracts, expand.grid(Moose_12 = seq(min(Moose_12), max(Moose_12), length.out = 100),
n_plots = mean(n_plots), Canopy_cover = mean(Canopy_cover)))  # use mean of n_plots for illustration
# Predict species richness
pred <- predict(gam_moose, new_data, type = "response", se.fit = TRUE)
# Combine predictions with new_data
pred_df <- data.frame(new_data, Predicted = pred$fit, SE = pred$se.fit)
# Plot moose
Moose_plot <- ggplot(pred_df, aes(x = Moose_12, y = Predicted)) +
geom_line(aes(y = Predicted), color = "blue") +  # plot the predicted values with a line
geom_ribbon(aes(ymin = Predicted - 1.96 * SE, ymax = Predicted + 1.96 * SE), alpha = 0.2) +  # plot 95% confidence interval
theme_classic() +   # classic theme for better clarity
labs(x = "Average moose density", y = "Understory species richness")+   # labels for x and y axes
geom_point(data = vegetation_tracts, aes(x = Moose_12, y = Sum_richness), color = "darkgrey") +  # add observed data points
theme_classic()+    # classic theme for better clarity
annotate("text", x = max(vegetation_tracts$Moose_12), y = max(vegetation_tracts$Sum_richness) - 0,
label = paste("%dev. =", round(model_summary$dev.expl*100, 1)), hjust = 1) +  # Add deviance explained
annotate("text", x = max(vegetation_tracts$Moose_12), y = max(vegetation_tracts$Sum_richness) - 5,
label = paste("p =", round(model_summary$s.table[1, "p-value"], 8)), hjust = 1)   # Add p-value
Moose_plot
# Fit a GAM for species richness versus moose density
gam_moose <- gam(Sum_richness ~ s(Moose_12, bs = "tp", k = 4) + n_plots,
data = vegetation_tracts, family = poisson)
gam.check(gam_moose)
# Print summary of the model
model_summary <- summary(gam_moose)
model_summary
#Check the AIC
AIC(gam_moose)
# Visualize the GAM fit
plot(gam_moose, select = 1, main = "Smooth Function of Browser Density")
# Generate data for plotting predictions
new_data <- with(vegetation_tracts, expand.grid(Moose_12 = seq(min(Moose_12), max(Moose_12), length.out = 100),
n_plots = mean(n_plots), Canopy_cover = mean(Canopy_cover)))  # use mean of n_plots for illustration
# Predict species richness
pred <- predict(gam_moose, new_data, type = "response", se.fit = TRUE)
# Combine predictions with new_data
pred_df <- data.frame(new_data, Predicted = pred$fit, SE = pred$se.fit)
# Plot moose
Moose_plot <- ggplot(pred_df, aes(x = Moose_12, y = Predicted)) +
geom_line(aes(y = Predicted), color = "blue") +  # plot the predicted values with a line
geom_ribbon(aes(ymin = Predicted - 1.96 * SE, ymax = Predicted + 1.96 * SE), alpha = 0.2) +  # plot 95% confidence interval
theme_classic() +   # classic theme for better clarity
labs(x = "Average moose density", y = "Understory species richness")+   # labels for x and y axes
geom_point(data = vegetation_tracts, aes(x = Moose_12, y = Sum_richness), color = "darkgrey") +  # add observed data points
theme_classic()+    # classic theme for better clarity
annotate("text", x = max(vegetation_tracts$Moose_12), y = max(vegetation_tracts$Sum_richness) - 0,
label = paste("%dev. =", round(model_summary$dev.expl*100, 1)), hjust = 1) +  # Add deviance explained
annotate("text", x = max(vegetation_tracts$Moose_12), y = max(vegetation_tracts$Sum_richness) - 5,
label = paste("p =", round(model_summary$s.table[1, "p-value"], 8)), hjust = 1)   # Add p-value
Moose_plot
# Fit a GAM for species richness versus red deer density
gam_red <- gam(Sum_richness ~ s(Red_12, bs = "tp", k = 3) + n_plots,
data = vegetation_tracts, family = poisson)
gam.check(gam_red)
# Print summary of the model
model_summary <- summary(gam_red)
model_summary
#Check the AIC
AIC(gam_red)
# Visualize the GAM fit
plot(gam_red, select = 1, main = "Smooth Function of Browser Density")
# Generate data for plotting predictions
new_data <- with(vegetation_tracts, expand.grid(Red_12 = seq(min(Red_12), max(Red_12), length.out = 100),
n_plots = mean(n_plots), Canopy_cover = mean(Canopy_cover)))  # use mean of n_plots for illustration
# Predict species richness
pred <- predict(gam_red, new_data, type = "response", se.fit = TRUE)
# Combine predictions with new_data
pred_df <- data.frame(new_data, Predicted = pred$fit, SE = pred$se.fit)
# Plot moose
Red_plot <- ggplot(pred_df, aes(x = Red_12, y = Predicted)) +
geom_line(aes(y = Predicted), color = "blue") +  # plot the predicted values with a line
geom_ribbon(aes(ymin = Predicted - 1.96 * SE, ymax = Predicted + 1.96 * SE), alpha = 0.2) +  # plot 95% confidence interval
theme_classic() +   # classic theme for better clarity
labs(x = "Average red deer density", y = "")+   # labels for x and y axes
geom_point(data = vegetation_tracts, aes(x = Red_12, y = Sum_richness), color = "darkgrey") +  # add observed data points
theme_classic()+    # classic theme for better clarity
annotate("text", x = max(vegetation_tracts$Red_12), y = max(vegetation_tracts$Sum_richness) - 0,
label = paste("%dev. =", round(model_summary$dev.expl*100, 1)), hjust = 1) +  # Add deviance explained
annotate("text", x = max(vegetation_tracts$Red_12), y = max(vegetation_tracts$Sum_richness) - 5,
label = paste("p =", round(model_summary$s.table[1, "p-value"], 3)), hjust = 1)   # Add p-value
Red_plot
Combined_plot <- (Small_plot | Small_plot)
Combined_plot
Combined_plot <- (Small_plot | Moose_plot)
Combined_plot
# Plot small deer
Small_plot <- ggplot(pred_df, aes(x = Small_12, y = Predicted)) +
geom_line(aes(y = Predicted), color = "blue") +  # plot the predicted values with a line
geom_ribbon(aes(ymin = Predicted - 1.96 * SE, ymax = Predicted + 1.96 * SE), alpha = 0.2) +  # plot 95% confidence interval
theme_classic() +   # classic theme for better clarity
labs(x = "Average small deer density", y = "Understory species richness")+   # labels for x and y axes
geom_point(data = vegetation_tracts, aes(x = Small_12, y = Sum_richness), color = "darkgrey") +  # add observed data points
theme_classic()+    # classic theme for better clarity
annotate("text", x = max(vegetation_tracts$Small_12), y = max(vegetation_tracts$Sum_richness) - 0,
label = paste("%dev. =", round(model_summary$dev.expl*100, 1)), hjust = 1) +  # Add deviance explained
annotate("text", x = max(vegetation_tracts$Small_12), y = max(vegetation_tracts$Sum_richness) - 5,
label = paste("p =", round(model_summary$s.table[1, "p-value"], 5)), hjust = 1)   # Add p-value
Small_plot
# Plot moose
Moose_plot <- ggplot(pred_df, aes(x = Moose_12, y = Predicted)) +
geom_line(aes(y = Predicted), color = "blue") +  # plot the predicted values with a line
geom_ribbon(aes(ymin = Predicted - 1.96 * SE, ymax = Predicted + 1.96 * SE), alpha = 0.2) +  # plot 95% confidence interval
theme_classic() +   # classic theme for better clarity
labs(x = "Average moose density", y = "")+   # labels for x and y axes
geom_point(data = vegetation_tracts, aes(x = Moose_12, y = Sum_richness), color = "darkgrey") +  # add observed data points
theme_classic()+    # classic theme for better clarity
annotate("text", x = max(vegetation_tracts$Moose_12), y = max(vegetation_tracts$Sum_richness) - 0,
label = paste("%dev. =", round(model_summary$dev.expl*100, 1)), hjust = 1) +  # Add deviance explained
annotate("text", x = max(vegetation_tracts$Moose_12), y = max(vegetation_tracts$Sum_richness) - 5,
label = paste("p =", round(model_summary$s.table[1, "p-value"], 8)), hjust = 1)   # Add p-value
Combined_plot <- (Small_plot | Moose_plot)
Combined_plot
Combined_plot <- (Small_plot | Moose_plot)
Combined_plot
# Plot small deer
Small_plot <- ggplot(pred_df, aes(x = Small_12, y = Predicted)) +
geom_line(aes(y = Predicted), color = "blue") +  # plot the predicted values with a line
geom_ribbon(aes(ymin = Predicted - 1.96 * SE, ymax = Predicted + 1.96 * SE), alpha = 0.2) +  # plot 95% confidence interval
theme_classic() +   # classic theme for better clarity
labs(x = "Average small deer density", y = "Understory species richness")+   # labels for x and y axes
geom_point(data = vegetation_tracts, aes(x = Small_12, y = Sum_richness), color = "darkgrey") +  # add observed data points
theme_classic()+    # classic theme for better clarity
annotate("text", x = max(vegetation_tracts$Small_12), y = max(vegetation_tracts$Sum_richness) - 0,
label = paste("%dev. =", round(model_summary$dev.expl*100, 1)), hjust = 1) +  # Add deviance explained
annotate("text", x = max(vegetation_tracts$Small_12), y = max(vegetation_tracts$Sum_richness) - 5,
label = paste("p =", round(model_summary$s.table[1, "p-value"], 5)), hjust = 1)   # Add p-value
Small_plot
# Fit a GAM for species richness versus small deer density
gam_small <- gam(Sum_richness ~ s(Small_12, bs = "tp", k = 3) + n_plots,
data = vegetation_tracts, family = poisson)
gam.check(gam_small)
# Print summary of the model
model_summary <- summary(gam_small)
model_summary
#Check the AIC
AIC(gam_small)
# Visualize the GAM fit
plot(gam_small, select = 1, main = "Smooth Function of Browser Density")
# Generate data for plotting predictions
new_data <- with(vegetation_tracts, expand.grid(Small_12 = seq(min(Small_12), max(Small_12), length.out = 100),
n_plots = mean(n_plots), Canopy_cover = mean(Canopy_cover)))  # use mean of n_plots for illustration
# Predict species richness
pred <- predict(gam_small, new_data, type = "response", se.fit = TRUE)
# Combine predictions with new_data
pred_df <- data.frame(new_data, Predicted = pred$fit, SE = pred$se.fit)
# Plot small deer
Small_plot <- ggplot(pred_df, aes(x = Small_12, y = Predicted)) +
geom_line(aes(y = Predicted), color = "blue") +  # plot the predicted values with a line
geom_ribbon(aes(ymin = Predicted - 1.96 * SE, ymax = Predicted + 1.96 * SE), alpha = 0.2) +  # plot 95% confidence interval
theme_classic() +   # classic theme for better clarity
labs(x = "Average small deer density", y = "Understory species richness")+   # labels for x and y axes
geom_point(data = vegetation_tracts, aes(x = Small_12, y = Sum_richness), color = "darkgrey") +  # add observed data points
theme_classic()+    # classic theme for better clarity
annotate("text", x = max(vegetation_tracts$Small_12), y = max(vegetation_tracts$Sum_richness) - 0,
label = paste("%dev. =", round(model_summary$dev.expl*100, 1)), hjust = 1) +  # Add deviance explained
annotate("text", x = max(vegetation_tracts$Small_12), y = max(vegetation_tracts$Sum_richness) - 5,
label = paste("p =", round(model_summary$s.table[1, "p-value"], 5)), hjust = 1)   # Add p-value
Small_plot
# Fit a GAM for species richness versus moose density
gam_moose <- gam(Sum_richness ~ s(Moose_12, bs = "tp", k = 4) + n_plots,
data = vegetation_tracts, family = poisson)
gam.check(gam_moose)
# Print summary of the model
model_summary <- summary(gam_moose)
model_summary
#Check the AIC
AIC(gam_moose)
# Visualize the GAM fit
plot(gam_moose, select = 1, main = "Smooth Function of Browser Density")
# Generate data for plotting predictions
new_data <- with(vegetation_tracts, expand.grid(Moose_12 = seq(min(Moose_12), max(Moose_12), length.out = 100),
n_plots = mean(n_plots), Canopy_cover = mean(Canopy_cover)))  # use mean of n_plots for illustration
# Predict species richness
pred <- predict(gam_moose, new_data, type = "response", se.fit = TRUE)
# Combine predictions with new_data
pred_df <- data.frame(new_data, Predicted = pred$fit, SE = pred$se.fit)
# Plot moose
Moose_plot <- ggplot(pred_df, aes(x = Moose_12, y = Predicted)) +
geom_line(aes(y = Predicted), color = "blue") +  # plot the predicted values with a line
geom_ribbon(aes(ymin = Predicted - 1.96 * SE, ymax = Predicted + 1.96 * SE), alpha = 0.2) +  # plot 95% confidence interval
theme_classic() +   # classic theme for better clarity
labs(x = "Average moose density", y = "")+   # labels for x and y axes
geom_point(data = vegetation_tracts, aes(x = Moose_12, y = Sum_richness), color = "darkgrey") +  # add observed data points
theme_classic()+    # classic theme for better clarity
annotate("text", x = max(vegetation_tracts$Moose_12), y = max(vegetation_tracts$Sum_richness) - 0,
label = paste("%dev. =", round(model_summary$dev.expl*100, 1)), hjust = 1) +  # Add deviance explained
annotate("text", x = max(vegetation_tracts$Moose_12), y = max(vegetation_tracts$Sum_richness) - 5,
label = paste("p =", round(model_summary$s.table[1, "p-value"], 8)), hjust = 1)   # Add p-value
Moose_plot
Combined_plot <- (Small_plot | Moose_plot)
Combined_plot
# Export the combined plot
ggsave("Browsers_GAM_1x2.tiff", plot = Combined_plot,
path = "~/GitHub/P1_field_layer/Plots",
scale = 1.0, width = 15, height = 7, dpi = 300, limitsize = TRUE, units = "cm")
# Export the combined plot
ggsave("Browsers_GAM_1x2.tiff", plot = Combined_plot,
path = "~/GitHub/P1_field_layer/Plots",
scale = 1.0, width = 15, height = 10, dpi = 300, limitsize = TRUE, units = "cm")
# Export the combined plot
ggsave("Browsers_GAM_1x2.tiff", plot = Combined_plot,
path = "~/GitHub/P1_field_layer/Plots",
scale = 1.0, width = 15, height = 5, dpi = 300, limitsize = TRUE, units = "cm")
# Export the combined plot
ggsave("Browsers_GAM_1x2.tiff", plot = Combined_plot,
path = "~/GitHub/P1_field_layer/Plots",
scale = 1.0, width = 15, height = 8, dpi = 300, limitsize = TRUE, units = "cm")
# Fit a GAM for shrub cover versus browser density
gam_shrub <- gam(Shrubs_cover/100 ~ s(Moose_eq_12, bs = "tp", k = 3), # Canopy cover and n plots were insignificant
data = vegetation_tracts, betar(link = "logit"))
gam.check(gam_shrub)
# Print summary of the model
model_summary <- summary(gam_shrub)
model_summary
#Check the AIC
AIC(gam_shrub)
# Visualize the GAM fit
plot(gam_shrub, select = 1, main = "Smooth Function of Browser Density")
# Generate data for plotting predictions
new_data <- with(vegetation_tracts, expand.grid(
Moose_eq_12 = seq(min(Moose_eq_12), max(Moose_eq_12), length.out = 100)
))
# Predict shrub cover
pred <- predict(gam_shrub, new_data, type = "response", se.fit = TRUE)
# Combine predictions with new_data
pred_df <- data.frame(new_data, Predicted = pred$fit, SE = pred$se.fit)
# Plot shrub cover
Shrub_plot <- ggplot(pred_df, aes(x = Moose_eq_12, y = Predicted)) +
geom_line(color = "blue") +  # Plot the predicted values with a line
geom_ribbon(aes(ymin = Predicted - 1.96 * SE, ymax = Predicted + 1.96 * SE), alpha = 0.2) +  # 95% CI
geom_point(data = vegetation_tracts, aes(x = Moose_eq_12, y = Shrubs_cover / 100), color = "darkgrey") +  # Observed data
theme_classic() +  # Use a clean theme
labs(x = "", y = "Shrub cover (proportion)") +  # Axis labels
annotate("text", x = max(vegetation_tracts$Moose_eq_12), y = 0.9 * max(vegetation_tracts$Shrubs_cover/100),
label = paste("% dev. =", round(model_summary$dev.expl * 100, 1)), hjust = 1) +  # Deviance explained
annotate("text", x = max(vegetation_tracts$Moose_eq_12), y = 0.8 * max(vegetation_tracts$Shrubs_cover/100),
label = paste("p =", round(model_summary$s.table[1, "p-value"], 5)), hjust = 1)  # P-value annotation
Shrub_plot
# Plot moose
Moose_plot <- ggplot(pred_df, aes(x = Moose_12, y = Predicted)) +
geom_line(aes(y = Predicted), color = "blue") +  # plot the predicted values with a line
geom_ribbon(aes(ymin = Predicted - 1.96 * SE, ymax = Predicted + 1.96 * SE), alpha = 0.2) +  # plot 95% confidence interval
theme_classic() +   # classic theme for better clarity
labs(x = "Average moose density", y = "Understory species richness")+   # labels for x and y axes
geom_point(data = vegetation_tracts, aes(x = Moose_12, y = Sum_richness), color = "darkgrey") +  # add observed data points
theme_classic()+    # classic theme for better clarity
annotate("text", x = max(vegetation_tracts$Moose_12), y = max(vegetation_tracts$Sum_richness) - 0,
label = paste("%dev. =", round(model_summary$dev.expl*100, 1)), hjust = 1) +  # Add deviance explained
annotate("text", x = max(vegetation_tracts$Moose_12), y = max(vegetation_tracts$Sum_richness) - 5,
label = paste("p =", round(model_summary$s.table[1, "p-value"], 8)), hjust = 1)   # Add p-value
Moose_plot
# Fit a GAM for species richness versus moose density
gam_moose <- gam(Sum_richness ~ s(Moose_12, bs = "tp", k = 4) + n_plots,
data = vegetation_tracts, family = poisson)
gam.check(gam_moose)
# Print summary of the model
model_summary <- summary(gam_moose)
model_summary
#Check the AIC
AIC(gam_moose)
# Visualize the GAM fit
plot(gam_moose, select = 1, main = "Smooth Function of Browser Density")
# Generate data for plotting predictions
new_data <- with(vegetation_tracts, expand.grid(Moose_12 = seq(min(Moose_12), max(Moose_12), length.out = 100),
n_plots = mean(n_plots), Canopy_cover = mean(Canopy_cover)))  # use mean of n_plots for illustration
# Predict species richness
pred <- predict(gam_moose, new_data, type = "response", se.fit = TRUE)
# Combine predictions with new_data
pred_df <- data.frame(new_data, Predicted = pred$fit, SE = pred$se.fit)
# Plot moose
Moose_plot <- ggplot(pred_df, aes(x = Moose_12, y = Predicted)) +
geom_line(aes(y = Predicted), color = "blue") +  # plot the predicted values with a line
geom_ribbon(aes(ymin = Predicted - 1.96 * SE, ymax = Predicted + 1.96 * SE), alpha = 0.2) +  # plot 95% confidence interval
theme_classic() +   # classic theme for better clarity
labs(x = "Average moose density", y = "Understory species richness")+   # labels for x and y axes
geom_point(data = vegetation_tracts, aes(x = Moose_12, y = Sum_richness), color = "darkgrey") +  # add observed data points
theme_classic()+    # classic theme for better clarity
annotate("text", x = max(vegetation_tracts$Moose_12), y = max(vegetation_tracts$Sum_richness) - 0,
label = paste("%dev. =", round(model_summary$dev.expl*100, 1)), hjust = 1) +  # Add deviance explained
annotate("text", x = max(vegetation_tracts$Moose_12), y = max(vegetation_tracts$Sum_richness) - 5,
label = paste("p =", round(model_summary$s.table[1, "p-value"], 8)), hjust = 1)   # Add p-value
Moose_plot
# Plot moose
Moose_plot <- ggplot(pred_df, aes(x = Moose_12, y = Predicted)) +
geom_line(aes(y = Predicted), color = "blue") +  # plot the predicted values with a line
geom_ribbon(aes(ymin = Predicted - 1.96 * SE, ymax = Predicted + 1.96 * SE), alpha = 0.2) +  # plot 95% confidence interval
theme_classic() +   # classic theme for better clarity
labs(x = "Average moose density", y = "Understory species richness")+   # labels for x and y axes
geom_point(data = vegetation_tracts, aes(x = Moose_12, y = Sum_richness), color = "darkgrey") +  # add observed data points
theme_classic()+    # classic theme for better clarity
annotate("text", x = max(vegetation_tracts$Moose_12), y = max(vegetation_tracts$Sum_richness) - 0,
label = paste("%dev. =", round(model_summary$dev.expl*100, 1)), hjust = 1) +  # Add deviance explained
annotate("text", x = max(vegetation_tracts$Moose_12), y = max(vegetation_tracts$Sum_richness) - 5,
label = paste("p =", round(model_summary$s.table[1, "p-value"], 3)), hjust = 1)   # Add p-value
Moose_plot
# Plot moose
Moose_plot <- ggplot(pred_df, aes(x = Moose_12, y = Predicted)) +
geom_line(aes(y = Predicted), color = "blue") +  # plot the predicted values with a line
geom_ribbon(aes(ymin = Predicted - 1.96 * SE, ymax = Predicted + 1.96 * SE), alpha = 0.2) +  # plot 95% confidence interval
theme_classic() +   # classic theme for better clarity
labs(x = "Average moose density", y = "Understory species richness")+   # labels for x and y axes
geom_point(data = vegetation_tracts, aes(x = Moose_12, y = Sum_richness), color = "darkgrey") +  # add observed data points
theme_classic()+    # classic theme for better clarity
annotate("text", x = max(vegetation_tracts$Moose_12), y = max(vegetation_tracts$Sum_richness) - 0,
label = paste("%dev. =", round(model_summary$dev.expl*100, 1)), hjust = 1) +  # Add deviance explained
annotate("text", x = max(vegetation_tracts$Moose_12), y = max(vegetation_tracts$Sum_richness) - 5,
label = paste("p =", round(model_summary$s.table[1, "p-value"], 5)), hjust = 1)   # Add p-value
Moose_plot
Moose_plot
## Functional groups GAM ####
library(ggplot2)
library(nlme)
library(betareg)
library(car)
library(patchwork)
# Fit a GAM for shrub cover versus browser density
gam_shrub <- gam(Shrubs_cover/100 ~ s(Moose_eq_12, bs = "tp", k = 3), # Canopy cover and n plots were insignificant
data = vegetation_tracts, betar(link = "logit"))
gam.check(gam_shrub)
# Print summary of the model
model_summary <- summary(gam_shrub)
model_summary
#Check the AIC
AIC(gam_shrub)
# Visualize the GAM fit
plot(gam_shrub, select = 1, main = "Smooth Function of Browser Density")
# Generate data for plotting predictions
new_data <- with(vegetation_tracts, expand.grid(
Moose_eq_12 = seq(min(Moose_eq_12), max(Moose_eq_12), length.out = 100)
))
# Predict shrub cover
pred <- predict(gam_shrub, new_data, type = "response", se.fit = TRUE)
# Combine predictions with new_data
pred_df <- data.frame(new_data, Predicted = pred$fit, SE = pred$se.fit)
# Plot shrub cover
Shrub_plot <- ggplot(pred_df, aes(x = Moose_eq_12, y = Predicted)) +
geom_line(color = "blue") +  # Plot the predicted values with a line
geom_ribbon(aes(ymin = Predicted - 1.96 * SE, ymax = Predicted + 1.96 * SE), alpha = 0.2) +  # 95% CI
geom_point(data = vegetation_tracts, aes(x = Moose_eq_12, y = Shrubs_cover / 100), color = "darkgrey") +  # Observed data
theme_classic() +  # Use a clean theme
labs(x = "", y = "Shrub cover (proportion)") +  # Axis labels
annotate("text", x = max(vegetation_tracts$Moose_eq_12), y = 0.9 * max(vegetation_tracts$Shrubs_cover/100),
label = paste("% dev. =", round(model_summary$dev.expl * 100, 1)), hjust = 1) +  # Deviance explained
annotate("text", x = max(vegetation_tracts$Moose_eq_12), y = 0.8 * max(vegetation_tracts$Shrubs_cover/100),
label = paste("p =", round(model_summary$s.table[1, "p-value"], 5)), hjust = 1)  # P-value annotation
Shrub_plot
# Plot shrub cover
Shrub_plot <- ggplot(pred_df, aes(x = Moose_eq_12, y = Predicted)) +
geom_line(color = "blue") +  # Plot the predicted values with a line
geom_ribbon(aes(ymin = Predicted - 1.96 * SE, ymax = Predicted + 1.96 * SE), alpha = 0.2) +  # 95% CI
geom_point(data = vegetation_tracts, aes(x = Moose_eq_12, y = Shrubs_cover / 100), color = "darkgrey") +  # Observed data
theme_classic() +  # Use a clean theme
labs(x = "Average browser density", y = "Shrub cover (proportion)") +  # Axis labels
annotate("text", x = max(vegetation_tracts$Moose_eq_12), y = 0.9 * max(vegetation_tracts$Shrubs_cover/100),
label = paste("% dev. =", round(model_summary$dev.expl * 100, 1)), hjust = 1) +  # Deviance explained
annotate("text", x = max(vegetation_tracts$Moose_eq_12), y = 0.8 * max(vegetation_tracts$Shrubs_cover/100),
label = paste("p =", round(model_summary$s.table[1, "p-value"], 5)), hjust = 1)  # P-value annotation
Shrub_plot
# Fit a GAM for forbs cover versus browser density
gam_forbs <- gam(Forbs_cover/100 ~ s(Moose_eq_12, bs = "tp", k = 3), # n plots was insignificant
data = vegetation_tracts, betar(link = "logit")) #  cloglog link for smoother handling of values near 0 or 1, better numerical stability
gam.check(gam_forbs)
# Print summary of the model
model_summary <- summary(gam_forbs)
model_summary
#Check the AIC
AIC(gam_forbs)
# Visualize the GAM fit
plot(gam_forbs, select = 1, main = "Smooth Function of Browser Density")
# Generate data for plotting predictions
new_data <- with(vegetation_tracts, expand.grid(
Moose_eq_12 = seq(min(Moose_eq_12), max(Moose_eq_12), length.out = 100),
Canopy_cover = mean(Canopy_cover)))
# Predict shrub cover
pred <- predict(gam_forbs, new_data, type = "response", se.fit = TRUE)
# Combine predictions with new_data
pred_df <- data.frame(new_data, Predicted = pred$fit, SE = pred$se.fit)
# Plot shrub cover
Forbs_plot <- ggplot(pred_df, aes(x = Moose_eq_12, y = Predicted)) +
geom_line(color = "blue") +  # Plot the predicted values with a line
geom_ribbon(aes(ymin = Predicted - 1.96 * SE, ymax = Predicted + 1.96 * SE), alpha = 0.2) +  # 95% CI
geom_point(data = vegetation_tracts, aes(x = Moose_eq_12, y = Forbs_cover / 100), color = "darkgrey") +  # Observed data
theme_classic() +  # Use a clean theme
labs(x = "Average browser density", y = "Forbs cover (proportion)") +  # Axis labels
annotate("text", x = max(vegetation_tracts$Moose_eq_12), y = 0.9 * max(vegetation_tracts$Forbs_cover/100),
label = paste("% dev. =", round(model_summary$dev.expl * 100, 1)), hjust = 1) +  # Deviance explained
annotate("text", x = max(vegetation_tracts$Moose_eq_12), y = 0.8 * max(vegetation_tracts$Forbs_cover/100),
label = paste("p =", round(model_summary$s.table[1, "p-value"], 3)), hjust = 1)  # P-value annotation
Forbs_plot
Combined_plot <- (Shrub_plot | Forbs_plot)
Combined_plot
# Export the combined plot
ggsave("Functional_GAM_1x2.tiff", plot = Combined_plot,
path = "~/GitHub/P1_field_layer/Plots",
scale = 1.0, width = 15, height = 15, dpi = 300, limitsize = TRUE, units = "cm")
# Export the combined plot
ggsave("Functional_GAM_1x2.tiff", plot = Combined_plot,
path = "~/GitHub/P1_field_layer/Plots",
scale = 1.0, width = 15, height = 8, dpi = 300, limitsize = TRUE, units = "cm")
# Fit a GAM for species richness versus small deer density
gam_small <- gam(Sum_richness ~ s(Small_12, bs = "tp", k = 3) + n_plots,
data = vegetation_tracts, family = poisson)
gam.check(gam_small)
# Print summary of the model
model_summary <- summary(gam_small)
model_summary
#Check the AIC
AIC(gam_small)
# Visualize the GAM fit
plot(gam_small, select = 1, main = "Smooth Function of Browser Density")
# Generate data for plotting predictions
new_data <- with(vegetation_tracts, expand.grid(Small_12 = seq(min(Small_12), max(Small_12), length.out = 100),
n_plots = mean(n_plots), Canopy_cover = mean(Canopy_cover)))  # use mean of n_plots for illustration
# Predict species richness
pred <- predict(gam_small, new_data, type = "response", se.fit = TRUE)
# Combine predictions with new_data
pred_df <- data.frame(new_data, Predicted = pred$fit, SE = pred$se.fit)
# Plot small deer
Small_plot <- ggplot(pred_df, aes(x = Small_12, y = Predicted)) +
geom_line(aes(y = Predicted), color = "blue") +  # plot the predicted values with a line
geom_ribbon(aes(ymin = Predicted - 1.96 * SE, ymax = Predicted + 1.96 * SE), alpha = 0.2) +  # plot 95% confidence interval
theme_classic() +   # classic theme for better clarity
labs(x = "Average small deer density", y = "Understory species richness")+   # labels for x and y axes
geom_point(data = vegetation_tracts, aes(x = Small_12, y = Sum_richness), color = "darkgrey") +  # add observed data points
theme_classic()+    # classic theme for better clarity
annotate("text", x = max(vegetation_tracts$Small_12), y = max(vegetation_tracts$Sum_richness) - 0,
label = paste("%dev. =", round(model_summary$dev.expl*100, 1)), hjust = 1) +  # Add deviance explained
annotate("text", x = max(vegetation_tracts$Small_12), y = max(vegetation_tracts$Sum_richness) - 5,
label = paste("p =", round(model_summary$s.table[1, "p-value"], 5)), hjust = 1)   # Add p-value
Small_plot
## Export with ggsave (change file name/path depending on species)
ggsave("Small_GAM.tiff", plot = Small_plot, device = NULL, path = "~/GitHub/P1_field_layer/Plots",
scale = 1.0, width = 7, height = 7, dpi = 300, limitsize = TRUE, units = "cm")
Combined_plot
